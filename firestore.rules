// DO NOT MODIFY THESE ON FIREBASE'S DASHBOARD.
// THESE RULES ARE CONTROLLED BY FILES IN A GIT REPOSITORY.
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // create and delete should be controlled by functions
    match /users/{userId} {
      allow read;

      allow update: if
        request.auth.uid != null &&
        request.path[4:5] == /$(request.auth.uid) &&
        request.resource.data.keys().hasAll(["name", "profileImageURL"]) &&
        request.resource.data.keys().hasOnly(["name", "profileImageURL"]) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 3 &&
        request.resource.data.name.size() < 32 &&
        request.resource.data.profileImageURL == resource.data.profileImageURL;
    }

    match /posts/{postId} {
      allow read;

      match /answers/{answerId} {
        allow read;

        allow create: if
          request.auth.uid != null &&
          exists(/databases/$(database)/documents/posts/$(postId)) &&
          request.resource.data.keys().hasAll(["user", "body", "likes", "dislikes", "createdAt"]) &&
          request.resource.data.keys().hasOnly(["user", "body", "likes", "dislikes", "createdAt"]) &&
          request.resource.data.user is path &&
          request.resource.data.user[3:] == /users/$(request.auth.uid) &&
          request.resource.data.body is string &&
          request.resource.data.body.size() >= 8 &&
          request.resource.data.body.size() < 65536 &&
          request.resource.data.likes is int &&
          request.resource.data.likes == 0 &&
          request.resource.data.dislikes is int &&
          request.resource.data.dislikes == 0 &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.createdAt == request.time;

        match /comments/{commentId} {
          allow read;

          allow create: if
            request.auth.uid != null &&
            exists(/databases/$(database)/documents/posts/$(postId)/answers/$(answerId)) &&
            request.resource.data.keys().hasAll(["user", "body", "likes", "dislikes", "createdAt"]) &&
            request.resource.data.keys().hasOnly(["user", "body", "likes", "dislikes", "createdAt"]) &&
            request.resource.data.user is path &&
            request.resource.data.user[3:] == /users/$(request.auth.uid) &&
            request.resource.data.body is string &&
            request.resource.data.body.size() >= 8 &&
            request.resource.data.body.size() < 65536 &&
            request.resource.data.likes is int &&
            request.resource.data.likes == 0 &&
            request.resource.data.dislikes is int &&
            request.resource.data.dislikes == 0 &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.createdAt == request.time;

          match /reactions/{reactionId} {
            allow list: if
              request.auth.uid != null &&
              resource.data.user[3:] == /users/$(request.auth.uid);

            allow create: if
              request.auth.uid != null &&
              request.path[10:] == /$(request.auth.uid) &&
              exists(/databases/$(database)/documents/posts/$(postId)/answers/$(answerId)/comments/$(commentId)) &&
              request.resource.data.keys().hasAll(["user", "type"]) &&
              request.resource.data.keys().hasOnly(["user", "type"]) &&
              request.resource.data.user is path &&
              request.resource.data.user[3:] == /users/$(request.auth.uid) &&
              request.resource.data.type in ["LIKE", "DISLIKE"];

            allow delete: if
              request.auth.uid != null &&
              resource.data.user[3:] == /users/$(request.auth.uid);
          }
        }

        match /reactions/{reactionId} {
          allow list: if
            request.auth.uid != null &&
            resource.data.user[3:] == /users/$(request.auth.uid);

          allow create: if
            request.auth.uid != null &&
            request.path[8:] == /$(request.auth.uid) &&
            exists(/databases/$(database)/documents/posts/$(postId)/answers/$(answerId)) &&
            request.resource.data.keys().hasAll(["user", "type"]) &&
            request.resource.data.keys().hasOnly(["user", "type"]) &&
            request.resource.data.user is path &&
            request.resource.data.user[3:] == /users/$(request.auth.uid) &&
            request.resource.data.type in ["LIKE", "DISLIKE"];

          allow delete: if
            request.auth.uid != null &&
            resource.data.user[3:] == /users/$(request.auth.uid);
        }
      }
    }
  }
}